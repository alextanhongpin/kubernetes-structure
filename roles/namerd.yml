# grant namerd permissions to custom resource definitions in k8s 1.8+ and third party resources in k8s < 1.8 for dtab storage
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: namerd-dtab-storage
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-view: "true"
rules:
  - apiGroups: ["l5d.io"]
    resources: ["dtabs"]
    verbs: ["get", "watch", "list", "update", "create"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: namerd-role-binding
subjects:
  - kind: ServiceAccount
    name: default
    # In this scenario, the namespace has to be the same as the namespace
    # linkerd is running, since linkerd is required to make a call to the
    # CustomResourceDefinition API
    namespace: namerd
roleRef:
  kind: ClusterRole
  name: namerd-dtab-storage
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: l5d-namerd-role-binding
subjects:
  - kind: ServiceAccount
    name: default
    # In this scenario, the namespace has to be the same as the namespace
    # linkerd is running, since linkerd is required to make a call to the
    # CustomResourceDefinition API
    namespace: linkerd
roleRef:
  kind: ClusterRole
  name: namerd-dtab-storage
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-namerd-role-binding
subjects:
  - kind: ServiceAccount
    name: default
    # In this scenario, the namespace has to be the same as the namespace
    # linkerd is running, since linkerd is required to make a call to the
    # CustomResourceDefinition API
    namespace: default
roleRef:
  kind: ClusterRole
  name: namerd-dtab-storage
  apiGroup: rbac.authorization.k8s.io
